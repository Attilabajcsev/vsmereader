# Generated by Django 5.2 on 2025-09-16

import re
from django.db import migrations, models
import django.db.models.deletion


def _derive_year_from_period(period: str) -> int:
    if not period:
        return 1970
    # Find all 4-digit year-like tokens and prefer the last one (end of period)
    years = re.findall(r"(19\d{2}|20\d{2}|2100)", str(period))
    if years:
        try:
            return int(years[-1])
        except Exception:
            return 1970
    return 1970


def forwards_func(apps, schema_editor):
    Company = apps.get_model('api', 'Company')
    Report = apps.get_model('api', 'Report')

    base_placeholder, _ = Company.objects.get_or_create(name='Unassigned')

    # First, ensure all reports have reporting_year set
    reports = list(Report.objects.all().only('id', 'reporting_period', 'company_id', 'reporting_year'))
    for r in reports:
        if not getattr(r, 'reporting_year', None):
            year = _derive_year_from_period(getattr(r, 'reporting_period', '') or '')
            setattr(r, 'reporting_year', year)
            r.save(update_fields=['reporting_year'])

    # Next, assign companies ensuring uniqueness per (company, year) by spreading across suffixed placeholders if needed
    from collections import defaultdict
    year_to_reports = defaultdict(list)
    for r in Report.objects.all().only('id', 'reporting_year', 'company_id'):
        year_to_reports[getattr(r, 'reporting_year', 1970)].append(r.id)

    for year, ids in year_to_reports.items():
        # deterministic order
        ids.sort()
        for idx, rid in enumerate(ids, start=1):
            r = Report.objects.get(id=rid)
            if getattr(r, 'company_id', None):
                continue
            if idx == 1:
                company = base_placeholder
            else:
                company_name = f'Unassigned #{idx}'
                company, _ = Company.objects.get_or_create(name=company_name)
            setattr(r, 'company_id', company.id)
            r.save(update_fields=['company_id'])


def backwards_func(apps, schema_editor):
    # No-op: keep data as is if rolling back schema, fields may be dropped separately
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_fact'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={'ordering': ['name']},
        ),
        migrations.AddField(
            model_name='report',
            name='reporting_year',
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='api.company'),
        ),
        migrations.RunPython(forwards_func, backwards_func),
        migrations.AlterField(
            model_name='report',
            name='reporting_year',
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name='report',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='api.company'),
        ),
        migrations.AddConstraint(
            model_name='report',
            constraint=models.UniqueConstraint(fields=('company', 'reporting_year'), name='unique_company_year'),
        ),
    ]


